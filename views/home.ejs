<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Redish UI</title>
    <link rel="icon" type="image/x-icon" href="https://redis.io/wp-content/themes/redislabs-glide/assets/dist/images/banner-box-icon.svg">

    <!-- ALPINE CORE -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <!-- PICO CSS -->
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.pink.min.css" /> -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.red.min.css"/>

    <!-- PICO COLORS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.colors.min.css" />

    <!-- FONTAWESOME ICONS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style type="text/css">
        /* Light color scheme (Default) */
        /* Can be forced with data-theme="light" */
        [data-theme="light"],
        :root:not([data-theme="dark"]) {
            --success-color: green;
        }

        /* Dark color scheme (Auto) */
        /* Automatically enabled if user has Dark mode enabled */
        @media only screen and (prefers-color-scheme: dark) {
        :root:not([data-theme]) {
            --success-color: chartreuse;
        }
        }

        /* Dark color scheme (Forced) */
        /* Enabled if forced with data-theme="dark" */
        [data-theme="dark"] {
            --success-color: chartreuse;
        }

        * {
            body {
                margin: 0;
                padding: 0;

                display: flex;
                flex-direction: column;
                min-height: 100vh;

                font-size: medium !important;
            }

            input,
            textarea,
            select,
            button,
            i {
                font-size: medium !important;
                /* height: calc(0.5rem * var(--pico-line-height) + var(--pico-form-element-spacing-vertical) * 2 + var(--pico-border-width) * 2) !important; */
            }

            body>header {
                margin-block: 0;
                padding-top: 0;
                margin-inline: 1rem;
            }

            a {
                text-decoration: none;
            }

            nav > ul > li {
                padding: 0;
                padding-inline: var(--pico-nav-element-spacing-horizontal);
                padding-block: 0.25rem;
            }
        }

        body > main {
            flex: 1;
            padding-top: 0;
        }

        .flex {
            display: flex;
        }

        .flex-col {
            flex-direction: column;
        }

        .justify-center {
            justify-content: center;
        }

        .justify-end {
            justify-content: end;
        }

        .justify-start {
            justify-content: start;
        }

        .justify-between {
            justify-content: space-between;
        }

        .align-center {
            align-items: center;
        }

        .align-start {
            align-items: start;
        }

        .align-end {
            align-items: end;
        }

        .space-between {
            justify-content: space-between;
        }


        .color-red {
            color: var(--pico-color-red-500);
        }

        .color-error {
            /* color: tomato;
            color: red; */
            color: var(--pico-color-red-550);
        }

        .color-success {
            /* color: green;
            color: chartreuse; */
            /* color: var(--pico-color-green-150); */
            color: var(--success-color);
        }

        .font-code {
            font-family: monospace;
        }

        .font-large {
            font-size: large;
        }
        .font-medium {
            font-size: medium;
        }
        .font-small {
            font-size: small !important;
        }



        .mb-1 {
            margin-bottom: 1rem;
        }




        .app-header {
            margin-inline: 2rem;
            padding-bottom: 0;
            /* border-bottom: 1rem wheat solid; */
        }

        .main-content {
            /* gap: 0rem; */
        }

        .form-article {
            width: 40rem;
            /* padding-top: 0.75rem; */
        }

        .output-article {
            /* padding-top: 0.75rem; */
            width: 40rem;
            min-height: max-content;
        }


        .connection-content {
            gap: 1.25rem;
        }


        .connection-list {
            flex: 1;
        }

        .connection-form {
            flex: 1;
        }


        .about {
            max-width: 920px;
        }

        
        .connection-nav-container {
            width: 40rem;
            margin-inline: auto;
        }
        
    </style>

    <script>
        const clone = (obj) => JSON.parse(JSON.stringify(obj));

        const getPageData = () => {
            const pageData = { 
                page: 'connection', 
                token: '<%= token %>',
                editMode: '<%= editMode %>',
                env: '', 
                baseUrl: '', 
                formData: {
                    redis: { 
                        host: '', 
                        port: 6379, 
                        tls: false, 
                        timeout: 30 
                    }, 
                    sourceRedis: { 
                        host: '', 
                        port: 6379, 
                        tls: false 
                    }, 
                    searchTerm: '', 
                    action: { 
                        dataType: 'string', 
                        key: '', 
                        value: '', 
                        ttl: 0, 
                        action: 'write' 
                    } 
                }, 
                formState: { 
                    isLoading: false, 
                    errorMessage: '', 
                    redisError: '', 
                    sourceRedisError: '' 
                }, 
                response: {}, 
                outputFormatted: false, 
                filteredResponse: {}, 
                csvString: '', 
                operation: { timeTaken: 0 },

                mode: 'list', 
                checkingConnection: false, // flag used while checking the connection info on the connection input form
                checkingConnections: false,  // flag used while checking the list of saved connections on start up
                connected: null, // flag used to store the connection status of the connection on the input form
                savingConnection: false, // save loading state
                duplicateConnection: false, // name conflict with existing
                connectionSaved: null,
                showConnectionDeleteConfirmationDialog: false,
                conIndex: null
            }
            return JSON.parse(JSON.stringify(pageData));
        }

        const init = (data) => {
            const origin = window.location.origin;
            const pathname = window.location.pathname;
            

            data.baseUrl = pathname;

            if (origin.startsWith('http://localhost') || origin.startsWith('http://127.0.0.1') || origin.startsWith('http://0.0.0.0')) {
                data.env = 'local';
            } else {
                data.env = 'live';
            }

            if(data.env == 'local') {
                data.formData.redis.host = 'localhost';
                data.formData.sourceRedis.host = 'localhost';
            } else {
                data.formData.redis.host = '';
                data.formData.sourceRedis.host = '';
                data.baseUrl += "/";
            }

            // console.log(`origin=${origin}, pathname=${pathname}, data.env=${data.env}, data.baseUrl=${data.baseUrl}`);
        }

        const keySearchHandler = (data) => {
            if(!data.formData.searchTerm || data.formData.searchTerm.trim().length == 0) return
            data.formState.isLoading = true;
            const startTime = performance.now();

            fetch(`${data.baseUrl}api/v1/process`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${data.token}`
                },
                body: JSON.stringify(data.formData)
            })
            .then(res => res.json())
            .then(res => {
                data.formState.isError = false; data.formState.errorMessage = '';
                data.response = res;
                data.filteredResponse = clone(res);

                if(res.error && res.status.includes(`Unable to connect to Redis`)) {
                    if(res.status.includes(`Unable to connect to Redis ${data.formData.redisHost}:${data.formData.redisPort}`)) {
                        data.formState.redisError = res.status;
                    } else if(res.status.includes(`Unable to connect to Redis ${data.formData.sourceRedisHost}:${data.formData.sourceRedisPort}`)) {
                        data.formState.sourceRedisError = res.status;
                    }
                } else {
                    data.formState.redisError = '';
                    data.formState.sourceRedisError = '';
                }
            })
            .catch(err => {
                console.error(err);
                data.formState.errorMessage = 'Service error';
            })
            .finally(() => {
                data.formState.isLoading = false;
                const endTime = performance.now();
                data.operation.timeTaken = endTime - startTime;
                // console.log(`Operation time: ${data.operation.timeTaken} milliseconds`);
            });
        }

        const submitHandler = (data) => {
            data.formData.searchTerm = '';
            data.formState.isLoading = true;
            const startTime = performance.now();

            // String to number
            data.formData.redis.port = Number(data.formData.redis.port);
            data.formData.sourceRedis.port = Number(data.formData.sourceRedis.port);
            data.formData.action.ttl = Number(data.formData.action.ttl);
            data.formData.redis.timeout = Number(data.formData.redis.timeout);


            fetch(`${data.baseUrl}api/v1/process`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${data.token}`
                },
                body: JSON.stringify(data.formData)
            })
            .then(res => res.json())
            .then(res => {
                data.formState.isError = false; data.formState.errorMessage = '';
                data.response = res;
                data.filteredResponse = clone(res);

                if(res.error && res.status.includes(`Unable to connect to Redis`)) {
                    if(res.status.includes(`Unable to connect to Redis ${data.formData.redisHost}:${data.formData.redisPort}`)) {
                        data.formState.redisError = res.status;
                    } else if(res.status.includes(`Unable to connect to Redis ${data.formData.sourceRedisHost}:${data.formData.sourceRedisPort}`)) {
                        data.formState.sourceRedisError = res.status;
                    }
                } else {
                    data.formState.redisError = '';
                    data.formState.sourceRedisError = '';
                }
            })
            .catch(err => {
                console.error(err);
                data.formState.errorMessage = 'Service error';
            })
            .finally(() => {
                data.formState.isLoading = false;
                const endTime = performance.now();
                data.operation.timeTaken = endTime - startTime;
                console.log(`Operation time: ${data.operation.timeTaken} milliseconds`);
            });
            
        }

        const downloadCSV = (data) => {
            let csvString = "";
            try {
                let csvRows = [];

                if(data.response?.data) {
                    if(Array.isArray(data.response.data)) {
                        const headers = Object.keys(data.response.data[0]);
                        csvRows.push(headers.join(','));
                        
                        data.response.data.forEach(row => {
                            let values = Object.values(row);
                            values = values.map(value => `"${ typeof value === 'object' ? JSON.stringify(value).replace(/"/g, '""') : value }"`).join(',');
                            csvRows.push(values);
                        });
                    } else {
                        
                        csvRows = [];
                        
                        const headers = Object.keys(data.response.data);
                        csvRows.push(headers.join(','));
                        
                        const values = Object.values(data.response.data).map(v => typeof v === 'object' ? JSON.stringify(v) : v).join(',');
                        csvRows.push(values);
                    }

                    csvString = csvRows.join('\n');
                }
            } catch (err) {
                console.error(err);
            }

            const csvFile = new Blob([csvString], { type: 'text/csv' });
            const csvURL = URL.createObjectURL(csvFile);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = csvURL;
            a.download = `${getDownloadFileName(data)}.csv`;
            a.click();
        }

        const downloadJSON = (data) => {
            const jsonFile = new Blob([JSON.stringify(data.response.data)], { type: 'text/json' });
            const csvURL = URL.createObjectURL(jsonFile);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = csvURL;
            a.download = `${getDownloadFileName(data)}.json`;
            a.click();
        }

        const getDownloadFileName = (data) => {
          const connectionAlias = data.formData.redis.alias;
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          return `${connectionAlias}_${timestamp}`;
        }

        const searchHandler = (data) => {
            console.log("In search", data.searchTerm);
            if(data.searchTerm && data.searchTerm.length > 0) {
                data.filteredResponse.data = clone(data.response.data.filter(site => JSON.stringify(site).toLocaleLowerCase().includes(data.searchTerm.toLocaleLowerCase())));
            } else {
                data.filteredResponse.data = clone(data.response.data);
            }
        }

        const initConnectionApp = (data) => {
            data.checkingConnections = true;
            
            data.duplicateConnection = false;
            data.connected = null;

            let connections = localStorage.getItem('connections');
            if(connections) {
                connections = JSON.parse(connections);
            } else {
                connections = [];
                connections.push({
                    alias: 'Local',
                    host: 'localhost',
                    port: 6379,
                    tls: false,
                    timeout: 30,
                    username: '',
                    password: '',
                    connected: false
                });

                localStorage.setItem('connections', JSON.stringify(connections));
            }

            data.connections = connections;            

            const fn = async () => {
                for(const con of data.connections) {
                    con.connected = null;
                    await fetch(`${data.baseUrl}api/v1/connect`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${data.token}`
                        },
                        body: JSON.stringify(con)
                    })
                    .then(res => res.json())
                    .then(res => {
                        console.log(res);
                        const { connected, error } = res;
                        if(error) {
                            con.connected = false;
                        } else if(connected) {
                            con.connected = true;
                        } else {
                            con.connected = null;
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        data.formState.errorMessage = 'Service error';
                    })
                    .finally(() => {
                        data.checkingConnection = false;
                    });
                }
                
                data.checkingConnections = false;
            }
            fn();
            
        }

        const connectionSaveHandler = data => {
            data.savingConnection = true;

            // Validate alias name, make sure non-duplicate
            if(data.mode == 'add') {
                const duplicate = data.connections.find(connection => connection.alias.toLowerCase() == data.formData.redis.alias.trim().toLowerCase());
                if(duplicate) {
                    data.duplicateConnection = true;
                } else {
                    // save
                    data.connections.push(data.formData.redis);
                    localStorage.setItem('connections', JSON.stringify(data.connections));
                    data.connectionSaved = true;
                }
            } else if(data.mode == 'edit') {
                
                let duplicate = false;
                for( let i = 0 ; i < data.connections.length ; i ++ ) {
                    const con = data.connections[i];
                    if(i != data.conIndex && con.alias.trim().toLowerCase() == data.connections[data.conIndex].alias.trim().toLowerCase()) {
                        duplicate = true;
                    }
                }

                if(duplicate) {
                    data.duplicateConnection = true;
                } else {
                    // save
                    localStorage.setItem('connections', JSON.stringify(data.connections));
                    data.connectionSaved = true;
                }

            }

            data.savingConnection = false;

        }

        const connect = data => {
            data.checkingConnection = true;

            // String to number
            data.formData.redis.port = Number(data.formData.redis.port);
            data.formData.sourceRedis.port = Number(data.formData.sourceRedis.port);
            data.formData.action.ttl = Number(data.formData.action.ttl);
            data.formData.redis.timeout = Number(data.formData.redis.timeout);

            fetch(`${data.baseUrl}api/v1/connect`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${data.token}`
                },
                body: JSON.stringify(data.formData.redis)
            })
            .then(res => res.json())
            .then(res => {
                console.log(res);
                const { connected, error } = res;
                if(error) {
                    data.connected = false;
                } else if(connected) {
                    data.connected = true;
                }
            })
            .catch(err => {
                console.error(err);
                data.formState.errorMessage = 'Service error';
            })
            .finally(() => {
                data.checkingConnection = false;
            });
        }

        const addConnection = (data) => {
            data.mode = 'add';
            data.formData.redis = {
                alias: '',
                host: '',
                port: 6379,
                tls: false,
                timeout: 30,
                username: '',
                password: ''
            };
            data.conIndex = -1;
            data.checkingConnection = false;
            data.connected = null;
            data.savingConnection = false;
            data.duplicateConnection = false;
            data.connectionSaved = null;
        }

        const editConnection = (conIndex, data) => {
            data.mode = 'edit';
            data.formData.redis = data.connections[conIndex];
            data.conIndex = conIndex;
        }

        const selectConnection = (conIndex, data) => {
            data.formData.redis = data.connections[conIndex];

            data.formData.response = {};
            data.formData.action.dataType ='string';
            data.formData.action.key ='';
            data.formData.action.value ='';
            data.formData.action.ttl =0;
            data.formData.action.action ='write';

            data.response = {};
            data.filteredResponse = {}; 
            data.csvString = ''; 
            data.operation = { timeTaken:  0 };

            data.mode = "list";
            data.page = "main";
        }
    
        const closeConnectionInputForm = (data) => {
            data.mode = "none";
            initConnectionApp(data);
        }
        
        const openConnectionDeleteDialog = (conIndex, data) => {
            data.showConnectionDeleteConfirmationDialog = true;
            data.conIndex = conIndex;
        }

        const closeConnectionDeleteDialog = (data) => {
            data.showConnectionDeleteConfirmationDialog = false;
            data.conIndex = null;
        }

        const deleteConnection = (data) => {
            if(data.conIndex) {
                data.connections.splice(data.conIndex, 1);
                localStorage.setItem('connections', JSON.stringify(data.connections));
            }
            data.showConnectionDeleteConfirmationDialog = false;
            data.conIndex = null;
            initConnectionApp(data);
        }
    </script>

</head>

<body 
    x-data="getPageData()"
    x-init="init($data)"
>
    <header class="app-header">
        <nav>
            <ul>
                <li>
                    <hgroup>
                        <h4 class="flex align-center" style="gap: 0.3rem;">
                            <img src="https://redis.io/wp-content/themes/redislabs-glide/assets/dist/images/banner-box-icon.svg" style="height: 24px; margin-bottom: 4px;" />
                            <a href="#" style="color: inherit;" @click="$data.formData?.redis?.alias ? page = 'main' : page = 'connection'"><span class="color-red">RED</span>ISH UI</a>
                        </h4>
                        <template x-if="page != 'main'">
                            <h6 style="font-size: medium;">Redis just got a <span class="color-red">whole lot easier.</span></h6>
                        </template>
                    </hgroup>
                </li>
            </ul>
            <ul>
                <li><a href="#about" @click="page = 'about'">About</a></li>
                <li><a href="mailto:soumitri.pattnaik@gmail.com?subject=Redish UI issue">Report Issue</a></li>

                <template x-if="page != 'about'">
                    <li>
                        <a class="contrast" href="https://github.com/Redish-UI/redish-ui" target="_blank" class="btn btn-primary">
                            <i class="fa-brands fa-github"></i>
                        </a>
                    </li>
                </template>

                <template x-if="page === 'about'">
                    <li>
                        <iframe src="https://github.com/sponsors/pattnaik-soumitri/button" title="Sponsor pattnaik-soumitri" height="32" width="114" style="border: 0; border-radius: 6px;"></iframe>
                    </li>
                </template>
            </ul>
        </nav>
    </header>

    <main class="flex justify-center">

        <section x-show="page ==='connection'" x-init="initConnectionApp($data)"  class="connection">
            <div class="container-fluid flex justify-center align-start space-between connection-content">
                <article class="connection-list">
                    <main>

                        <div class="flex justify-between mb-1">
                            <h6 style="margin-bottom: 0;">Connections</h6>
                            <a href="#" @click.prevent="addConnection($data)">
                                <i class="fa-solid fa-plus"></i>
                                New Connection
                            </a>
                        </div>

                        <!-- <span x-text="JSON.stringify($data.connections)"></span> -->
                        
                        <table class="table striped">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Alias</th>
                                    <th>Host:Port</th>
                                    <th>TLS</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <template x-for="(con, i) in connections" :key="i">
                                    <tr>
                                        <td x-text="i+1"></td>
                                        <td x-text="con.alias"></td>
                                        <td x-text="`${con.host}:${con.port}`"></td>
                                        <td>
                                            <template x-if="con.tls">
                                                <i class="fa-solid fa-check color-success"></i>
                                            </template>
                                        </td>
                                        <td>
                                            <div class="flex" style="gap: 1.25rem;">
                                                <a 
                                                    href="#" 
                                                    class="contrast" 
                                                    :data-tooltip="`${con.connected != null ? con.connected ? 'Connect' : 'Can not connect' : 'Verifying connection'}`" 
                                                    :disabled="!con.connected" 
                                                    @click.prevent="con.connected ? selectConnection(i, $data) : false"
                                                >
                                                    <template x-if="con.connected == null">
                                                        <i class="fa-solid fa-plug" aria-busy="true"></i>
                                                    </template>
                                                    <template x-if="con.connected == true">
                                                        <!-- <i class="fa-solid fa-plug-circle-check color-success"></i> -->
                                                        <i class="fa-solid fa-plug color-success"></i>
                                                    </template>
                                                    <template x-if="con.connected == false">
                                                        <i class="fa-solid fa-plug color-error"></i>
                                                    </template>
                                                </a>
                                                <a href="#" class="contrast" data-tooltip="Edit" @click.prevent="editConnection(i, $data)"><i class='fa-solid fa-pencil'></i></a>
                                                <a href="#" class="contrast" data-tooltip="Delete" @click.prevent="i > 0 ? openConnectionDeleteDialog(i, $data) : false" :disabled="i == 0"><i class='fa-solid fa-trash'></i></a>
                                            </div>
                                        </td>
                                    </tr>
                                </template>
                            </tbody>
                        </table>

                        <div class="flex justify-center">
                            <template x-if="checkingConnections">
                                <small aria-busy="true">Verifying all the connections ...</small>
                            </template>
                            <template x-if="!checkingConnections">
                                <small>All the connections are verified &nbsp;<i class="fa-solid fa-circle-check color-success font-small"></i></small>
                            </template>
                        </div>
                    </main>
                </article>

                <template x-if="$data.mode == 'add' || $data.mode == 'edit'" class="connection-form">
                    <article style="width: 33rem;">
                        <div class="flex justify-end">
                            <a href="#" @click.prevent="closeConnectionInputForm($data)">
                                <i class="fa-solid fa-xmark"></i>
                                Close
                            </a>
                        </div>
                        <form @submit.prevent="connectionSaveHandler($data)">

                            <label>
                                Alias <span class="color-red">*</span>
                                <input type="text" name="alias" id="alias" x-model="formData.redis.alias" required :aria-invalid="duplicateConnection === true">
                                <template x-if="duplicateConnection === true">
                                    <small class="color-error">Alias not available. Please use another one.</small>
                                </template>
                            </label>

                            <fieldset class="grid">
                                <label for="redis-host">
                                    Redis Host <span class="color-red">*</span>
                                    <input type="text" id="redis-host" name="redis-host" x-model="formData.redis.host" :aria-invalid="formState.redisError != ''" aria-describedby="valid-host" required>
                                </label>
            
                                <label for="redis-port">
                                    Redis Port <span class="color-red">*</span>
                                    <input type="number" min="1" max="9999" id="redis-port" name="redis-port" x-model="formData.redis.port" :aria-invalid="formState.redisError != ''" required>
                                </label>
                            </fieldset>
                            
                            <label style="flex: none;">
                                <input type="checkbox" role="switch" x-model="formData.redis.tls">
                                TLS
                            </label>
    
                            <details style="margin-top: 1rem;">
                                <summary>Show More</summary>
                                <div class="grid">
                                    <label for="username">
                                        Username
                                        <input type="text" id="username" name="username" x-model="formData.redis.username" :aria-invalid="formState.redisError != ''">
                                    </label>
    
                                    <label for="password">
                                        Password
                                        <input type="password" id="password" name="password" x-model="formData.redis.password" :aria-invalid="formState.redisError != ''">
                                    </label>
                                </div>

                                <label for="timeout">
                                    Timeout (s)
                                    <input type="number" id="timeout" name="timeout" x-model="formData.redis.timeout" required />
                                </label>

                            </details>

                            <div class="grid">
                                <button type="button" class="secondary" @click.prevent="connect($data)" :aria-busy="checkingConnection">
                                    Check Connection
                                    <template x-if="connected === true">
                                        <i class="fa-solid fa-circle-check color-success"></i>
                                    </template>
                                    <template x-if="connected === false">
                                        <i class="fa-solid fa-circle-xmark color-error"></i>
                                    </template>
                                </button>

                                <button type="submit" :aria-busy="savingConnection">
                                    Save Connection
                                    <template x-if="connectionSaved === true">
                                        <i class="fa-solid fa-circle-check color-success"></i>
                                    </template>
                                </button>
                            </div>

                            <div class="flex flex-col align-center">
                                <template x-if="connectionSaved === true">
                                    <small class="color-success">Connection saved on your browser</small>
                                </template>

                                <template x-if="connected === false">
                                    <small class="color-error">Unable to connect</small>
                                </template>

                                <template x-if="connected === true">
                                    <small class="color-success">Connection successful</small>
                                </template>
                            </div>
                            
                        </form>
                    </article>
                </template>
            </div>

            <dialog :open="showConnectionDeleteConfirmationDialog">
                <article>
                  <header>
                    <button aria-label="Close" rel="prev" @click.prevent="closeConnectionDeleteDialog($data)"></button>
                    <hgroup>
                        <h6>Are you sure?</h6>
                    </hgroup>
                  </header>
                  <p>
                    This action will delete the local connection that is stored on your browser and you will lose all the connection information stored.
                  </p>
                  <p>
                    Do you want to delete the connection?
                  </p>
                  <footer>
                    <div class="grid">
                        <button class="secondary" @click.prevent="closeConnectionDeleteDialog($data)">Close</button>
                        <button @click.prevent="deleteConnection($data)">Confirm</button>
                    </div>
                  </footer>
                </article>
            </dialog>
        </section>

        <section x-show="page === 'main'">
            
            <div class="container-fluid" >

                <div class="connection-nav-container">
                    <nav aria-label="breadcrumb">
                        <ul>
                            <li><a href="#" @click.prevent="page = 'connection'; mode = 'list'">Connections</a></li>
                            <li x-text="$data.formData.redis.alias"></li>
                        </ul>
                    </nav>
                </div>

                <div class="container-fluid flex flex-col justify-center align-center main-content">
                    <form @submit.prevent="submitHandler($data)">
                        <article class="form-article">
                            <main>
                                <!-- <label for="token">
                                    ID Token <span class="color-red">*</span>
                                    <textarea id="token" name="token" x-model="token" required></textarea>
                                    <small>Type <code>gcloud auth print-identity-token</code> in your terminal</small>
                                </label> -->
                                <div id="search" role="group">
                                    <input type="text" placeholder="Key (regex) *" x-model="$data.formData.searchTerm" required />
                                    <button @click.prevent="keySearchHandler($data)" @keyup.enter="keySearchHandler($data)" :disabled="!formData.searchTerm" :aria-busy="formState.isLoading">Search</button>
                                </div>

                                <template x-if="editMode === 'true' || editMode === 'TRUE'">
                                  <details>
                                      <summary>Something Else</summary>
                                      
                                      <div class="grid">
                                          <label for="data-type">
                                              Data Type <span class="color-red">*</span>
                                              <select id="data-type" name="data-type" x-model="formData.action.dataType" required>
                                                  <option>string</option>
                                                  <option>set</option>
                                              </select>
                                          </label>
          
                                          <label for="action">
                                              Action <span class="color-red">*</span>
                                              <select name="action" aria-label="Action" x-model="formData.action.action" required>
                                                  <option selected disabled value="">Action</option>
                                                  <!-- <option value="read">Read</option> -->
                                                  <option value="write">Write</option>
                                                  <!-- <option value="copy">Copy</option> -->
                                                  <template x-if="formData.action.dataType == 'string'">
                                                      <option value="delete">Delete</option>
                                                  </template>
                                                  <template x-if="formData.action.dataType == 'set'">
                                                      <option value="delete-value">Delete Value</option>
                                                  </template>
                                                  <template x-if="formData.action.dataType == 'set'">
                                                      <option value="delete-key">Delete Key</option>
                                                  </template>
                                              </select>
                                          </label>
                                      </div>

                                      <div>
                                          <hr/>
                                          
                                          <!-- SOURCE HOST & PORT -->
                                          <template x-if="formData.action.action == 'copy'">
                                              <div>
                                                  <fieldset class="grid" style="margin-bottom: 0; display: flex; align-items: center;">
                                                      <label for="sourceRedisHost">
                                                          Source Redis Host <span class="color-red">*</span>
                                                          <input type="text" id="sourceRedisHost" name="sourceRedisHost" x-model="formData.sourceRedis.host" required>
                                                      </label>
                  
                                                      <label for="sourceRedisPort">
                                                          Source Redis port <span class="color-red">*</span>
                                                          <input type="number" min="1" max="9999" id="sourceRedisPort" name="sourceRedisPort" x-model="formData.sourceRedis.port" required>
                                                      </label>
          
                                                      <label style="flex: none;">
                                                          <input type="checkbox" role="switch" x-model="formData.sourceRedis.tls">
                                                          TLS
                                                      </label>
                                                  </fieldset>
          
                                                  <details>
                                                      <summary>Show More</summary>
                                                      <div class="grid">
                                                          <label for="sourceRedisUsername">
                                                              Source Redis Username
                                                              <input type="text" id="sourceRedisUsername" name="sourceRedisUsername" x-model="formData.sourceRedis.username" :aria-invalid="formState.redisError != ''">
                                                          </label>
                          
                                                          <label for="sourceRedisPassword">
                                                              Source Redis Password
                                                              <input type="password" id="sourceRedisPassword" name="sourceRedisPassword" x-model="formData.sourceRedis.password" :aria-invalid="formState.redisError != ''">
                                                          </label>
                                                      </div>
                                                  </details>
                                                  <hr/>
                                              </div>
                                          </template>
          
                                          <div class="grid">
                                              <!-- KEY -->
                                              <template x-if="formData.action.action == 'read' || formData.action.action == 'write' || formData.action.action == 'copy' || formData.action.action == 'delete' || formData.action.action == 'delete-key' || formData.action.action == 'delete-value'">
                                                  <label for="key">
                                                      Key<span x-text="formData.action.dataType == 'string' && formData.action.action != 'write' ? ' (regex)' : ''"></span> <span class="color-red">*</span>
                                                      <input type="text" id="key" name="key" x-model="formData.action.key" required>
                                                  </label>
                                              </template>
      
                                              <!-- TTL -->
                                              <template x-if="formData.action.action == 'write' || formData.action.action == 'copy'">
                                                  <label for="ttl">
                                                      TTL <span class="color-red">*</span>
                                                      <input type="number" min="0" id="ttl" name="ttl" x-model="formData.action.ttl" required>
                                                      <small>TTL in minutes. Default = 0 i.e. no expiry</small>
                                                  </label>
                                              </template>
                                          </div>
              
                                          <!-- VALUE -->
                                          <template x-if="formData.action.action == 'write' || formData.action.action == 'delete-value'">
                                              <label for="value">
                                                  Value <span class="color-red">*</span>
                                                  <textarea id="value" name="value" x-model="formData.action.value" required></textarea>
                                              </label>
                                          </template>
                                          
                                      </div>

                                      <button type="submit" :aria-busy="formState.isLoading ? 'true' : 'false'">Submit</button>
                                  </details>
                                </template>
                            </main>
                            
                            <!-- <footer>
                                <button type="submit" :aria-busy="formState.isLoading ? 'true' : 'false'">Submit</button>
                            </footer> -->
                        </article>

                        <article class="output-article">
                            <main>
                                <label for="output" x-data="{isCopied: false}">
                                    <div style="display: flex; justify-content: space-between;">
                                        <div>
                                            Output
                                            <small>
                                                <a href="#" style="margin-left: 1rem;" @click.prevent="outputFormatted = !outputFormatted" x-text="outputFormatted ? 'raw response' : 'format response'"></a>
                                            </small>
                                        </div>
                                        
                                        <small>
                                            <a href="#" data-tooltip="Copy to clipboard" @click.prevent="isCopied = true; navigator.clipboard.writeText(outputFormatted ? JSON.stringify($data.response.data, null, '  ') : JSON.stringify($data.response.data));">
                                                <i :class="isCopied ? 'fa-solid fa-circle-check' : 'fa-regular fa-copy'" :style="isCopied ? 'color: green;' : ''"></i>
                                            </a>
                                        </small>
                                    </div>
                                    <textarea class="font-code font-medium" rows="13" readonly :value="outputFormatted ? JSON.stringify($data.response.data, null, '  ') : JSON.stringify($data.response.data)"></textarea>
                                    <small>
                                        <div class="flex" style="justify-content: space-between;">
                                            <span>Status: 
                                                <template x-if="$data.formState.errorMessage">
                                                    <span x-text="$data.formState.errorMessage" class="color-error"></span>
                                                </template>
        
                                                <template x-if="$data.response.message">
                                                    <span x-text="$data.response.message" class="color-success"></span>
                                                </template>
                                            </span>
        
                                            <span>Time: 
                                                <template x-if="$data.operation.timeTaken > 0.0">
                                                    <span x-text="`${$data.operation.timeTaken.toFixed(1)} ms`" :class="$data.formState.errorMessage ? 'color-error' : 'color-success'"></span>
                                                </template>
                                            </span>
                                        </div>
                                    </small>
                                    <!-- <template x-if="($data.formData.action.action == 'read' || $data.formData.action.action == 'read') && $data.response.data"> -->
                                    <template x-if="$data.response.data">
                                        <div class="flex justify-center" style="gap: 2rem;">
                                            <a href="#" @click.prevent="downloadCSV($data)" class="contrast font-medium"><i class="fa-solid fa-download"></i> CSV</a>
                                            <a href="#" @click.prevent="downloadJSON($data)" class="contrast font-medium"><i class="fa-solid fa-download"></i> JSON</a>
                                        </div>
                                    </template>
                                </label>
                            </main>
                        </article>
                    </form>
                </div>
            </div>
    
            <!-- <template x-if="$data.filteredResponse?.data && ($data.formData.action.action == 'read')" x-data="{searchTerm: ''}">
                <div>
                    <div class="container-fluid" style="max-width: 520px;">
                        <input name="search" type="search" placeholder="Search" x-model="searchTerm" @change="searchHandler($data)" />
                    </div>
                    
                    <div class="container-fluid overflow-auto">
                        <table class="font-code font-medium">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Action</th>
                                    <th>Values</th>
                                </tr>
                            </thead>
                            <tbody>
                                <template x-for="(site, i) in $data.filteredResponse?.data">
                                    <tr>
                                        <td><span x-text="(i+1)"></span></td>
                                        <td x-data="{ isCopied: false }">
                                            <a href="#" data-tooltip="Copy to clipboard" @click.prevent="isCopied = true;navigator.clipboard.writeText(JSON.stringify(site));">
                                                <i :class="isCopied ? 'fa-solid fa-circle-check' : 'fa-regular fa-copy'" :style="isCopied ? 'color: green;' : ''"></i>
                                            </a>
                                        </td>
                                        <td>
                                            <code x-text="JSON.stringify(site, null, '  ')"></code>
                                        </td>
                                    </tr>
                                </template>
                            </tbody>
                        </table>
                    </div>
                </div>
            </template> -->
        </section>

        <section class="container about" x-show="page === 'about'">
            <div>
                <h4>About Redish UI</h4>
                <p><strong>Redish UI</strong> is a <strong>free and open-source</strong> GUI for Redis, aimed for <strong>simplicity and easy of use</strong>. Deployable in <strong>under 2 minutes ⚡⚡</strong> via a serverless function (AWS Lambda / Google Cloud Function, etc), Redish UI provides a user-friendly interface to streamline your Redis interaction at no/low cost 💰.</p>
                <!-- <p>When your Redis instance is hosted outside your network and cannot be accessed from your local development environment, Redis UI provides a solution by using VPC connectors to establish connectivity within the same network.</p> -->
                <p>Currently, Redish UI supports <code>String</code> and <code>Set</code> data types, with planned support for <code>Hash</code>, <code>List</code>, and <code>Geospatial Index</code> data types coming by <strong>end of Q2 2024</strong>.</p>
                
                <h4>Purpose and Motivation</h4>
                <!-- <p>Redish UI was born out of a need we encountered in our own development process. We faced a scenario where we could not connect to our Redis instances locally because they were in a private network. Due to security policy restrictions, connecting our local development machines to the private network where the Redis instances resided was not an option 😔. As a result, our only way to interact with Redis was programmatically through cloud functions with a VPC connector to the Redis instance's private network.</p>
                <p>This approach worked but lacked the convenience of a graphical interface. Redish UI builds on this idea, offering a comprehensive solution with the necessary APIs and UI elements bundled in a single codebase to provide an easy-to-deploy and easy-to-use graphical interface for Redis 💪. This can be deployed both as a serverless function and a regular service, offering flexibility and ease of use without requiring a dedicated Redis service or workload 😊.</p>
                <p><i>**Redish UI is not designed to include every Redis feature or to match the full functionality of other dedicated Redis UI libraries. Instead, it focuses on delivering a user-friendly interface for the most commonly used Redis data types and operations.</i></p> -->
                <p>Redish UI was created to solve a challenge I faced: my Redis instances were in a private network, and security policies prevented local access. My only option was to interact with Redis programmatically through cloud functions with a VPC connector 😔.</p>
                <p>While this worked, it lacked the convenience of a graphical interface. Redish UI addresses this by providing a comprehensive solution with the necessary APIs and UI elements in a single codebase, making it easy to deploy and use 💪. It can be deployed as a serverless function or a regular service, offering flexibility and ease of use without needing a dedicated Redis service 😊.</p>
                <p><i>**Redish UI isn't designed to include every Redis feature or match the full functionality of other Redis UI libraries. Instead, it focuses on delivering a user-friendly interface for the most commonly used Redis data types and operations.</i></p>

                <h4>Features</h4>
                <ul class="features">
                    <li>Connection management</li>
                    <li>Data export to CSV & JSON format.</li>
                    <li>Automatic theming based on system them.</li>
                    <li>Data transfer functionality (in development)</li>
                </ul>
                <a href="https://github.com/Redish-UI/redish-ui" target="_blank" class="btn btn-primary">View on GitHub</a>

                <h4>About the author</h4>
                <p>I am a software engineer with over 10 years of professional experience and more than 14 years of experience in coding and software development. Currently, I serve as a Principal Engineer at Sensormatic, specializing in cloud-native data applications, system design and development.</p>
                <p>In addition to my main role, I run several side projects, including Redish UI. You can explore my work on GitHub. I am passionate about staying current with the latest technological advancements and enjoy building software focused on process improvement, automation, and tooling.</p>
                <p>In my spare time, I develop web and desktop applications using technologies such as Vue, Firebase, and Pocketbase. Over the years, I've become adept at quickly bringing ideas to life by choosing a lean stack that maximizes productivity with minimal effort.</p>                    
                <p>Feel free to connect with me on <a href="https://github.com/pattnaik-soumitri" target="_blank">GitHub</a>, <a href="https://in.linkedin.com/in/soumitri-pattnaik" target="_blank">LinkedIn</a>, or <a href="https://x.com/biki636" target="_blank">X (Twitter)</a>. I'm always open to feedback, collaboration, and discussing new ideas.</p>
                <p>If my works helps you or your organization, please consider becoming a <iframe src="https://github.com/sponsors/pattnaik-soumitri/button" title="Sponsor pattnaik-soumitri" height="32" width="114" style="border: 0; border-radius: 6px;"></iframe>. Peace ✌ & Thanks 🙏</p>
            </div>
        </section>

        <section class="container" x-show="page === 'feedback'">
            FEEDBACK
        </section>

    </main>

    <footer>
        <span style="display: flex; justify-content: center; font-size: small;">
            Crafted by&nbsp;<a href="https://in.linkedin.com/in/soumitri-pattnaik" target="_blank">Soumitri</a>
        </span>
    </footer>

</body>
</html>
